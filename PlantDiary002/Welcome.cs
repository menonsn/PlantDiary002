// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("fiscal_year")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FiscalYear { get; set; }

        [JsonProperty("acct_period")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AcctPeriod { get; set; }

        [JsonProperty("dept_code")]
        public string DeptCode { get; set; }

        [JsonProperty("dept_desc")]
        public string DeptDesc { get; set; }

        [JsonProperty("fund_code")]
        public string FundCode { get; set; }

        [JsonProperty("fund_desc")]
        public string FundDesc { get; set; }

        [JsonProperty("exp_acct_cat")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ExpAcctCat { get; set; }

        [JsonProperty("exp_acct_cat_desc")]
        public string ExpAcctCatDesc { get; set; }

        [JsonProperty("exp_acct_sub_no", NullValueHandling = NullValueHandling.Ignore)]
        public string ExpAcctSubNo { get; set; }

        [JsonProperty("exp_acct_sub_desc", NullValueHandling = NullValueHandling.Ignore)]
        public ExpAcctSubDesc? ExpAcctSubDesc { get; set; }

        [JsonProperty("trans_id")]
        public string TransId { get; set; }

        [JsonProperty("trans_line_no")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TransLineNo { get; set; }

        [JsonProperty("record_date")]
        public DateTimeOffset RecordDate { get; set; }

        [JsonProperty("check_no")]
        public string CheckNo { get; set; }

        [JsonProperty("amount")]
        public string Amount { get; set; }

        [JsonProperty("vendor_name")]
        public string VendorName { get; set; }
    }

    public enum ExpAcctSubDesc { AgencySpecific, Design, GeotechMaterialTesting, PreliminarySurvey };

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ExpAcctSubDescConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ExpAcctSubDescConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExpAcctSubDesc) || t == typeof(ExpAcctSubDesc?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AGENCY SPECIFIC":
                    return ExpAcctSubDesc.AgencySpecific;
                case "Design":
                    return ExpAcctSubDesc.Design;
                case "Geotech/Material Testing":
                    return ExpAcctSubDesc.GeotechMaterialTesting;
                case "Preliminary Survey":
                    return ExpAcctSubDesc.PreliminarySurvey;
            }
            throw new Exception("Cannot unmarshal type ExpAcctSubDesc");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExpAcctSubDesc)untypedValue;
            switch (value)
            {
                case ExpAcctSubDesc.AgencySpecific:
                    serializer.Serialize(writer, "AGENCY SPECIFIC");
                    return;
                case ExpAcctSubDesc.Design:
                    serializer.Serialize(writer, "Design");
                    return;
                case ExpAcctSubDesc.GeotechMaterialTesting:
                    serializer.Serialize(writer, "Geotech/Material Testing");
                    return;
                case ExpAcctSubDesc.PreliminarySurvey:
                    serializer.Serialize(writer, "Preliminary Survey");
                    return;
            }
            throw new Exception("Cannot marshal type ExpAcctSubDesc");
        }

        public static readonly ExpAcctSubDescConverter Singleton = new ExpAcctSubDescConverter();
    }
}
